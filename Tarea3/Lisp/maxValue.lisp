; Función que regresa el nodo (o estado) con el máximo valor, dado sus 'hijos'.
; -∞ = most-negative-fixnum
; +∞ = most-positive-fixnum
(defun maxValue (state a b)
  (print 'Max)
  (when (terminalTest state)
    (setf (third state) (utility state))
    (print 'Utilidad1)
    (print state)
    (print 'FinUtilidad)
    (push state allSuccessors)
    (return-from maxValue (third state)))
  (let ((v most-negative-fixnum))
    (mapcar #'(lambda (s)
      (when (and (eq (fourth state) 0)
              (< (+ (length (first (first (second s)))) (length (second (first (second s)))) (length (first (second (second s)))) (length (second (second (second s)))))
                  (+ (length (first (first infoFirst))) (length (second (first infoFirst))) (length (first (second infoFirst))) (length (second (second infoFirst))))))
        (setf (third s) 90909090)
        (print 'Utilidad2)
        (print s)
        (print 'FinUtilidad)
        (push s allSuccessors)
        (return-from maxValue (third s)))
      (setq v (max v (minValue s a b)))
      (when (>= v b)
        (setf (third state) v)
        (print 'Utilidad2)
        (print state)
        (print 'FinUtilidad)
        (push state allSuccessors)
        (return-from maxValue v))
      (setq a (max a v))) (successors state))
    (setf (third state) v)
    (print 'Utilidad3)
    (print state)
    (print 'FinUtilidad)
    (push state allSuccessors)
    (return-from maxValue v)))
