; Obtenemos el árbol completo hasta un nivel 4 de todas las jugadas posibles
; Recordar: Nodo (# info heurística lvl)
; eg: (successors '(0 (((1 2 3 4) (5)) ((25 26 27 28) ())) nil 0))
; (successors '(0 (((1 2 3 4 5 6 7 8 9 10 11 12) ()) ((21 22 23 24 25 26 27 28 29 30 31 32) ())) nil 0))
(defun successors (state)
  (setq myLvl (+ (fourth state) 1) resSuccessors nil tmpPawn nil tmpKing nil)
  (if (oddp myLvl)
    (setq player (first (second state)) rival (second (second state)))
    (setq player (second (second state)) rival (first (second state))))
  (setq tmpPawnRival (first rival) tmpKingRival (second rival))
  (mapcar #'(lambda (checker)

    (setq posib1 (movePawn checker (oddp myLvl)) posib2 (+ posib1 1))
    (if (find checker '(4 12 20 28))
      (setq posib2 nil))
    (if (find checker '(5 13 21 29))
      (setq posib1 nil))
    (cond ((null posib1) )
      ((not (find posib1 (append (first player) (second player) (first rival) (second rival))))
          (push posib1 tmpPawn))
      ((and (not (limite posib1)) (not (find posib1 (append (first player) (second player)))) (find posib1 (append (first rival) (second rival))) (not (find (movePawn posib1 (oddp myLvl)) (append (first rival) (second rival)))))
          (push (movePawn posib1 (oddp myLvl)) tmpPawn)
          (setq tmpPawnRival (remove posib1 tmpPawnRival))
          (setq tmpKingRival (remove posib1 tmpKingRival)))
      ((find posib1 (if (oddp myLvl) '(29 30 31 32) '(1 2 3 4)))
          (push posib1 tmpKing)))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))

    (cond ((null posib2) )
      ((not (find posib2 (append (first player) (second player) (first rival) (second rival))))
          (push posib2 tmpPawn))
      ((and (not (limite posib2)) (not (find posib2 (append (first player) (second player)))) (find posib2 (append (first player) (second player) (first rival) (second rival))) (not (find (+ (movePawn posib2 (oddp myLvl)) 1) (append (first rival) (second rival)))))
          (push (+ (movePawn posib2 (oddp myLvl)) 1) tmpPawn)
          (setf tmpPawnRival (remove posib2 tmpPawnRival))
          (setf tmpKingRival (remove posib2 tmpKingRival)))
      ((find posib2 (if (oddp myLvl) '(29 30 31 32) '(1 2 3 4)))
          (push posib2 tmpKing)))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))) (first player))

  (mapcar #'(lambda (checker)
    (setq posib1 (movePawn checker (oddp myLvl)) posib2 (+ posib1 1) posib3 (- posib1 8) posib4 (+ posib3 1) )
    (if (find checker '(1 2 3))
      (setq posib3 nil posib4 nil))
    (if (find checker '(4))
      (setq posib2 nil posib3 nil posib4 nil))
    (if (find checker '(5 13 21))
      (setq posib1 nil posib3 nil))
    (if (find checker '(29))
      (setq posib1 nil posib2 nil posib3 nil))
    (if (find checker '(30 31 32))
      (setq posib1 nil posib2 nil))
    (if (find checker '(12 20 28))
      (setq posib2 nil posib4 nil))

    (cond ((null posib1) )
      ((not (find posib1 (append (first player) (second player) (first rival) (second rival))))
          (push posib1 tmpKing))
      ((and (not (limite posib1)) (not (find posib1 (append (first player) (second player)))) (find posib1 (append (first player) (second player) (first rival) (second rival))) (not (find (movePawn posib1 (oddp myLvl)) (append (first rival) (second rival)))))
          (push (movePawn posib1 (oddp myLvl)) tmpKing)
          (setq tmpPawnRival (remove posib1 tmpPawnRival))
          (setq tmpKingRival (remove posib1 tmpKingRival))))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))

    (cond ((null posib2) )
      ((not (find posib2 (append (first player) (second player) (first rival) (second rival))))
          (push posib2 tmpKing))
      ((and (not (limite posib2)) (not (find posib2 (append (first player) (second player)))) (find posib2 (append (first player) (second player) (first rival) (second rival))) (not (find (+ (movePawn posib2 (oddp myLvl)) 1) (append (first rival) (second rival)))))
          (push (+ (movePawn posib2 (oddp myLvl)) 1) tmpKing)
          (setf tmpPawnRival (remove posib2 tmpPawnRival))
          (setf tmpKingRival (remove posib2 tmpKingRival))))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))

    (cond ((null posib3) )
      ((not (find posib3 (append (first player) (second player) (first rival) (second rival))))
          (push posib3 tmpKing))
      ((and (not (limite posib3)) (not (find posib3 (append (first player) (second player)))) (find posib3 (append (first player) (second player) (first rival) (second rival))) (not (find (- (movePawn posib3 (oddp myLvl)) 8) (append (first rival) (second rival)))))
          (push (- (movePawn posib3 (oddp myLvl)) 8) tmpKing)
          (setf tmpPawnRival (remove posib3 tmpPawnRival))
          (setf tmpKingRival (remove posib3 tmpKingRival))))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))

    (cond ((null posib4) )
      ((not (find posib4 (append (first player) (second player) (first rival) (second rival))))
          (push posib4 tmpKing))
      ((and (not (limite posib4)) (not (find posib4 (append (first player) (second player)))) (find posib4 (append (first player) (second player) (first rival) (second rival))) (not (find (- (movePawn posib4 (oddp myLvl)) 7) (append (first rival) (second rival)))))
          (push (- (movePawn posib4 (oddp myLvl)) 7) tmpKing)
          (setf tmpPawnRival (remove posib4 tmpPawnRival))
          (setf tmpKingRival (remove posib4 tmpKingRival))))
    (push2ResSuccessors checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
    (setq tmpPawn nil tmpKing nil tmpPawnRival (first rival) tmpKingRival (second rival))) (second player))

  (reverse resSuccessors))

(defun movePawn (checker isBlack)
  (if isBlack
    (if (or (and (>= checker 1) (<= checker 4))
            (and (>= checker 9) (<= checker 12))
            (and (>= checker 17) (<= checker 20))
            (and (>= checker 25) (<= checker 28)))
      (return-from movePawn (+ checker 4))
      (return-from movePawn (+ checker 3))))
  (if (not isBlack)
    (if (or (and (>= checker 1) (<= checker 4))
            (and (>= checker 9) (<= checker 12))
            (and (>= checker 17) (<= checker 20))
            (and (>= checker 25) (<= checker 28)))
      (return-from movePawn (- checker 4))
      (return-from movePawn (- checker 5)))))

(defun limite (posib)
  (find posib '(5 13 21 12 20 28)))

(defun push2ResSuccessors (checker tmpPawn tmpKing tmpPawnRival tmpKingRival)
  (if (null tmpPawn)
    (setq tmpPawn (first player)) (setq tmpPawn (append tmpPawn (remove checker (first player)))))
  (print checker)
  (print tmpPawn)
  (if (null tmpKing)
    (setq tmpKing (second player)) (setq tmpKing (append tmpKing (remove checker (second player)))))
  (if (not (equal player (list tmpPawn tmpKing)))
    (if (oddp myLvl)
      (push (list (incf id) (list (list tmpPawn tmpKing) (list tmpPawnRival tmpKingRival)) nil myLvl) resSuccessors)
      (push (list (incf id) (list (list tmpPawnRival tmpKingRival) (list tmpPawn tmpKing)) nil myLvl) resSuccessors))))
